import React, { useState } from 'react'; 
// Importa o React e o hook useState, que serve para criar estados e controlar dados que mudam no componente

import { View, Text, TextInput, StyleSheet } from 'react-native'; 
// Importa componentes b√°sicos do React Native para construir a interface: View (caixa), Text (texto), TextInput (caixa de texto) e StyleSheet (estilos)

export default function EstadoObjeto() {
  // Fun√ß√£o principal que define o componente chamado EstadoObjeto

  // Cria um estado chamado "usuario" que √© um objeto com duas propriedades: nome e idade
  // O valor inicial √© { nome: 'Usu√°rio', idade: 20 }
  // setUsuario √© a fun√ß√£o que usamos para atualizar esse estado
  const [usuario, setUsuario] = useState({ nome: 'Usu√°rio', idade: 20 });

  return (
    <View style={styles.container}>
      {/* Mostra o nome do usu√°rio */}
      <Text style={styles.titulo}>üë§ Nome: {usuario.nome}</Text>

      {/* Mostra a idade do usu√°rio */}
      <Text style={styles.titulo}>üéÇ Idade: {usuario.idade}</Text>

      {/* Caixa de texto para o usu√°rio digitar o nome */}
      <TextInput
        style={styles.input}                   // Aplica estilo na caixa de texto
        placeholder="Digite o nome"            // Texto que aparece quando est√° vazio
        value={usuario.nome}                   // Mostra o nome atual do usu√°rio na caixa
        onChangeText={(novoNome) =>            // Quando o texto mudar, pega o novo nome
          setUsuario({                         // Atualiza o estado "usuario" copiando o objeto antigo...
            ...usuario,                       // ...com o operador spread "..." para manter outras propriedades iguais
            nome: novoNome                   // ...e substitui apenas o campo "nome" pelo novo texto digitado
          })
        }
      />

      {/* Caixa de texto para o usu√°rio digitar a idade */}
      <TextInput
        style={styles.input}
        placeholder="Digite a idade"
        keyboardType="numeric"                 // Abre teclado num√©rico para facilitar digitar n√∫meros
        value={usuario.idade.toString()}      // Mostra a idade atual convertida para texto (pois TextInput usa texto)
        onChangeText={(novaIdade) =>
          setUsuario({
            ...usuario,                       // Mant√©m os outros dados do usu√°rio iguais
            // Atualiza a idade convertendo o texto digitado em n√∫mero
            // Se o texto n√£o for um n√∫mero v√°lido, coloca 0 para evitar erro
            idade: parseInt(novaIdade) || 0
          })
        }
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { padding: 20 },  // Espa√ßo interno na tela para afastar do canto
  titulo: { fontSize: 18, marginBottom: 10 }, // Tamanho e espa√ßamento dos textos que mostram nome e idade
  input: {                    // Estilo das caixas de texto
    borderWidth: 1,           // Borda fina
    borderColor: '#aaa',      // Cor cinza clara na borda
    padding: 10,              // Espa√ßo dentro da caixa para o texto n√£o ficar grudado na borda
    marginBottom: 10,         // Espa√ßo embaixo para separar as caixas
  },
});
